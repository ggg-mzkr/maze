#苦労したところ
迷路作成のアルゴリズムがいくつかあり、その中からどれを選べば良いか、まず悩みました。
solverの簡単なアルゴリズムが思いついたため、「穴掘り法」を採用したのですが、小さい迷路ではうまく動くものの、400×400だと再帰が多すぎてエラーになってしまうということがありました。
また、「穴掘り法」のアルゴリズムの特性上、タイルは奇数×奇数のサイズになってしまい、問題の制約にあった400×400を満たすことができませんでした。

迷路の作成や経路の計算は比較的高速に終わるのですが、DOMの構築がどうしても遅く、400×400だと6秒ほどかかってしまいました。


#工夫したところ
mazeとsolverをクラス分けすることで、見通しをよくしmodulabilityを高めました。
mazeは再帰が深すぎてエラーが発生することがあったのですが、ラッパー関数を一枚挟むことでこの問題を解決しました。
また、道を伸ばすときに、道を伸ばした手順と座標を保存して置くことでのちのsolverでの経路の計算を単純にしました。

solverは道をゴールから辿っていき、分かれ道に突き当たったら、それらの道の中で一番最初に作られた道へ進むというアルゴリズムを採用しました。オーソドックスな探索をしている分けではないので、他の迷路には適用できる可能性は低いですが、その分高速に動作します。


#感想
アルゴリズムの理解と、それを実装に落とし込むのが大変だったけどやりがいがありました。今回の課題の中で一番楽しかったです。
400×400という大きな迷路をどのようにして作るのか考えるのが楽しかったです。  
